// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Torre.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Aeropuerto {
  public static partial class Despegue
  {
    static readonly string __ServiceName = "Aeropuerto.Despegue";

    static readonly grpc::Marshaller<global::Aeropuerto.Pista_Des> __Marshaller_Aeropuerto_Pista_Des = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Aeropuerto.Pista_Des.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Aeropuerto.Resp_Des> __Marshaller_Aeropuerto_Resp_Des = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Aeropuerto.Resp_Des.Parser.ParseFrom);

    static readonly grpc::Method<global::Aeropuerto.Pista_Des, global::Aeropuerto.Resp_Des> __Method_enviar_despegue = new grpc::Method<global::Aeropuerto.Pista_Des, global::Aeropuerto.Resp_Des>(
        grpc::MethodType.Unary,
        __ServiceName,
        "enviar_despegue",
        __Marshaller_Aeropuerto_Pista_Des,
        __Marshaller_Aeropuerto_Resp_Des);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Aeropuerto.TorreReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Despegue</summary>
    public abstract partial class DespegueBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Aeropuerto.Resp_Des> enviar_despegue(global::Aeropuerto.Pista_Des request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Despegue</summary>
    public partial class DespegueClient : grpc::ClientBase<DespegueClient>
    {
      /// <summary>Creates a new client for Despegue</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DespegueClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Despegue that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DespegueClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DespegueClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DespegueClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Aeropuerto.Resp_Des enviar_despegue(global::Aeropuerto.Pista_Des request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enviar_despegue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Aeropuerto.Resp_Des enviar_despegue(global::Aeropuerto.Pista_Des request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_enviar_despegue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Aeropuerto.Resp_Des> enviar_despegueAsync(global::Aeropuerto.Pista_Des request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enviar_despegueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Aeropuerto.Resp_Des> enviar_despegueAsync(global::Aeropuerto.Pista_Des request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_enviar_despegue, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DespegueClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DespegueClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DespegueBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_enviar_despegue, serviceImpl.enviar_despegue).Build();
    }

  }
  /// <summary>
  ///asignacion pista de aterrizaje
  /// </summary>
  public static partial class Aterrizaje
  {
    static readonly string __ServiceName = "Aeropuerto.Aterrizaje";

    static readonly grpc::Marshaller<global::Aeropuerto.Pista_At> __Marshaller_Aeropuerto_Pista_At = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Aeropuerto.Pista_At.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Aeropuerto.Resp_At> __Marshaller_Aeropuerto_Resp_At = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Aeropuerto.Resp_At.Parser.ParseFrom);

    static readonly grpc::Method<global::Aeropuerto.Pista_At, global::Aeropuerto.Resp_At> __Method_enviar_aterrizaje = new grpc::Method<global::Aeropuerto.Pista_At, global::Aeropuerto.Resp_At>(
        grpc::MethodType.Unary,
        __ServiceName,
        "enviar_aterrizaje",
        __Marshaller_Aeropuerto_Pista_At,
        __Marshaller_Aeropuerto_Resp_At);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Aeropuerto.TorreReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Aterrizaje</summary>
    public abstract partial class AterrizajeBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Aeropuerto.Resp_At> enviar_aterrizaje(global::Aeropuerto.Pista_At request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Aterrizaje</summary>
    public partial class AterrizajeClient : grpc::ClientBase<AterrizajeClient>
    {
      /// <summary>Creates a new client for Aterrizaje</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AterrizajeClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Aterrizaje that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AterrizajeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AterrizajeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AterrizajeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Aeropuerto.Resp_At enviar_aterrizaje(global::Aeropuerto.Pista_At request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enviar_aterrizaje(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Aeropuerto.Resp_At enviar_aterrizaje(global::Aeropuerto.Pista_At request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_enviar_aterrizaje, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Aeropuerto.Resp_At> enviar_aterrizajeAsync(global::Aeropuerto.Pista_At request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enviar_aterrizajeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Aeropuerto.Resp_At> enviar_aterrizajeAsync(global::Aeropuerto.Pista_At request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_enviar_aterrizaje, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AterrizajeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AterrizajeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AterrizajeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_enviar_aterrizaje, serviceImpl.enviar_aterrizaje).Build();
    }

  }
}
#endregion
